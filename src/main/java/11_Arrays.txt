Array
Array is a data structure 
	to store sequence of Homogeneous element
	with unique index (starting from 0)
	of fixed size 
	stored at contigous memory location
	referred by a single name
	& each element of array can be accessed at constant time.

Arrays are the collection of a finite number of homogeneous data elements.
Elements of the array are referenced respectively by an index set consisting of n consecutive numbers and 
	are stored respectively in successive memory locations.

The array elements can be accessed in a constant time by using index of the particular element.
To access an array element, address of an element is computed as an offset from the base address of the array and 
	one multiplication is needed to compute,
 what is supposed to be added to the base address to get the memory address to the element
Example:
100 + sizeof(int)*3 = 106

First the size of an element of that data type is calculated and then it is multiplied with the index of the element 
	to get the value to be added to the base address.
This process takes one multiplication and one addition. 
Since these two operations take constant time, we can say the array access can be performed in constant time.


Why we need an Array?
	Using single name we can refer multiple element.
	Variable name can be dynamicaly defined.
	Now we can perform some logic on elements of an aaray efficiently.

Types of an Array:
	1D array
	ND array
Java support 255D array.
 	3D,4D,.. array use case example?????

How is an Array stored in memory?
	1D,2D,3D ..all stored in memory as a 1D array.


Operations on Arrays
1)Traverse 
	from start
	from end
3)Inverse
	a)Not in-place 
	b)An in-place
4)Insert 
	a)At start
	b)At end
	c)At middle
4)Delete
	a)At start
	b)At end
	c)At middle
5)Update
	a)At start
	b)At end
	c)At middle
6)Searching
	a)Linear Search
	b)Binary Search
	.
	.
7)Sorting
	a)Bubble Sort
	b)Insertion SOrt
	c)Selection Sort
	d)Quick SOrt
	e)Heap Sort
	f)Merge Sort


Create an Array:Array index start at 0 because array reference store address of first element that is arr+0
	Time Complexity: O(1)
	Space Complexity: O(n)
Insertion an element
	Time Complexity: O(1)
	Space Complexity: O(1)
Traversing: Visiting all elements for any purpose like updation or printing 
	Time Complexity: O(n)
	Space Complexity: O(1)
Reading an element with given index of array
	Time Complexity: O(1)
	Space Complexity: O(1)
Searching an element
	Time Complexity: O(n)
	Space Complexity: O(1)
Deleting an element
	Time Complexity: O(1)
	Space Complexity: O(1)



2D array
Creating an array
	Time Complexity: O(1)
	Space Complexity: O(n)
Inserting a value in 2D array
	Time Complexity: O(1)
	Space Complexity: O(1)
Traversing: Visiting all elements for any purpose like updation or printing 
	Time Complexity: O(xy)=O(n)
	Space Complexity: O(1)
Reading an element with given index of array
	Time Complexity: O(1)
	Space Complexity: O(1)
Searching an element
	Time Complexity: O(n)
	Space Complexity: O(1)
Deleting an element
	Time Complexity: O(1)
	Space Complexity: O(1)


When to use/avoid an Array?
When to use?
1)When there is a need to store multiple homogeneous data
2)WHen we want random access of elements

When to avoid?
1)When data to be stored are non-homogeneous
2)When data to be stored is not known in advance

Advantage
Using single name we can refer multiple values
Fetching is very fast O(1)

Disadvantage:
Fixed size (We can overcome to this using dynamic array, like ArrayList in java)

Code 2D array

Practical Use of array:
	In implementing hash tables
	In dynamic programming
		We compromise space complexity to achieve better time complexity.
		Find the biggest substring which is Palindrome.
			a)
				Time Complexity: O(n^3)
				Space Complexity: O(n)
			b)Using dynamic programming
				Time Complexity: O(n^2)
				Space Complexity: O(n^2)
	










