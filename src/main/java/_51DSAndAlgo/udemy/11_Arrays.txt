

4) Array
Array is a data structure 
	to store sequence of Homogeneous element
	with unique index (starting from 0)
	of fixed size 
	stored at contigous memory location
	referred by a single name
	& each element of array can be accessed at constant time.

Why we need an Array?
	Using single name we can refer multiple element.
	Variable name can be dynamicaly defined.
	Now we can perform some logic on elements of an aaray efficiently.

Types of an Array:
	1D array
	ND array
Java support 255D array.
 	3D,4D,.. array use?????

How is an Array stored in memory?
	1D,2D,3D ..all stored in memory as a 1D array.

Create an Array:Array index start at 0 because array reference store address of first element that is arr+0
	Time Complexity: O(1)
	Space Complexity: O(n)
Insertion an element
	Time Complexity: O(1)
	Space Complexity: O(1)
Traversing: Visiting all elements for any purpose like updation or printing 
	Time Complexity: O(n)
	Space Complexity: O(1)
Reading an element with given index of array
	Time Complexity: O(1)
	Space Complexity: O(1)
Searching an element
	Time Complexity: O(n)
	Space Complexity: O(1)
Deleting an element
	Time Complexity: O(1)
	Space Complexity: O(1)



2D array
Creating an array
	Time Complexity: O(1)
	Space Complexity: O(n)
Inserting a value in 2D array
	Time Complexity: O(1)
	Space Complexity: O(1)
Traversing: Visiting all elements for any purpose like updation or printing 
	Time Complexity: O(xy)=O(n)
	Space Complexity: O(1)
Reading an element with given index of array
	Time Complexity: O(1)
	Space Complexity: O(1)
Searching an element
	Time Complexity: O(n)
	Space Complexity: O(1)
Deleting an element
	Time Complexity: O(1)
	Space Complexity: O(1)


When to use/avoid an Array?
When to use?
1)When there is a need to store multiple homogeneous data
2)WHen we want random access of elements

When to avoid?
1)When data to be stored are non-homogeneous
2)When data to be stored is not known in advance


Code 2D array

Practical Use of array:
	In dynamic programming
		We compromise space complexity to achieve better time complexity.
		Find the biggest substring which is Palindrome.
			a)
				Time Complexity: O(n^3)
				Space Complexity: O(n)
			b)Using dynamic programming
				Time Complexity: O(n^2)
				Space Complexity: O(n^2)
	To implement hash tables










