
Logical DS
Stack
Queue
Tree 
Hashing
Graph

Stack
	Bangle in Girl's Hand
	Back Button in browser

Property of stack
	LIFO-Last in first out 

Operations on Stack
	Create()
	Push()
	Pop()
	Peek()
	IsEmpty()
	IsFull()
	DeleteStack()

Stack Using Array
	Adv
		Easy Implement
	Dis Adv
		Fixed Size

Stack Using Linked List
	Adv
		Variable size
	Dis Adv
		Moderate Implement

Operations on Stack using Array
	Create()
		Time Complexity: O(1)
		Space Complexity: O(n)//Only case out of 7 operation where complexity differ
	Push()
		Time Complexity: O(1)
		Space Complexity: O(1)
	Pop()
		Time Complexity: O(1)
		Space Complexity: O(1)
	Peek()
		Time Complexity: O(1)
		Space Complexity: O(1)
	IsEmpty()
		Time Complexity: O(1)
		Space Complexity: O(1)
	IsFull()
		Time Complexity: O(1)
		Space Complexity: O(1)
	DeleteStack()
		Time Complexity: O(1)
		Space Complexity: O(1)


Operations on Stack using Linked List
	Create()
		Single Linked List
		Time Complexity: O(1)
		Space Complexity: O(1)
	Push()
		Insert at start
		Time Complexity: O(1)
		Space Complexity: O(1)
	Pop()
		delete & return from start
		Time Complexity: O(1)
		Space Complexity: O(1)
	Peek()
		Time Complexity: O(1)
		Space Complexity: O(1)
	IsEmpty()
		Time Complexity: O(1)
		Space Complexity: O(1)
	IsFull()
		Not needed because we can always add element in Linked list
		Although Strictly speckaing complexity is Not applicable 
			Time Complexity: O(1)
			Space Complexity: O(1)
	DeleteStack()
		Time Complexity: O(1)
		Space Complexity: O(1)

Array vs Linked list implementtion of Stack


When to Use/Avoid Stack
When to Use
	1)LIFO 
	2)WHen data need not to be easily curropted (No one can insert/delete data in middle)
When to avoid 
	1)Random acces not possible-If we have done some mistake, its costly to rectify
	


	



