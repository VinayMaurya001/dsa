Tree
Analogy
	Cooler devices hierarchy
	Properties of Cooler devices hierarchy
		Used to represent data in hierarchical form general tp specialization as we go from top to bottom
		Every node has 2 components(Data & references to its sub-category)
		At top, it has Base product & 2 products called left sub-category & right sub-category under it.
Properties of tree	
	Used to represent data in hierarchical form
	Every node(ideally) has 2 components(Data & references)
	It has  a root node & 2 disjoint binary tree called left subtree & right subtree. 


Why learn tree?
	To improve efficiency of searching,insertion,deletion to O(logn)

Tree termiologies
Root: A node with no parent
Edge: A link from parent to child
Leaf: A node with no children
Sibling:Children of same parent
Ancestor: means parent, grand-parent, great grand parent & so on for a given node
Depth of a node: Length of the path from root to node
Depth of root node=0.
Height of node:Length of the path from that node to the deepest node
Height of tree: Height of root node. Max height among all the node.
Depth of tree: Max depth among all the node.

Predecessor:Predecessor of a node is the immediate previous node in inorder traversal of the binary tree.
Successor:Predecessor of a node is the immediate next node in inorder traversal of the binary tree.

Binary tree:	Tree with 0,1 or 2 children
It is a family of data structure(BST,Heap tree, AVL,Red-Black, Syntax tree, Huffman Coding tree etc. )

Why Binary tree?
1)Prerequisite for more advanced tree(BST,AVL,Red-Black,Expression tree etc..)
2)It is used in solving specific problems:
 Huffman Coding
 Heap(Priority Queue)
 Expression parsing


Type of Binary tree:
Strict Binary tree:
	If each node has 0 or 2 children.
Full Binary tree:
	If each non-leaf node has 2 children & all leaf nodes are at same level.
Complete Binary tree:
	If all levels are completely filled except possibly the last level & the last level has all keys as left as possible.

Binary tree-Common Operations
Creation of tree
Insertion of a node
Deletion of a node
Search for a value
Traverse of all nodes
Deletion of tree

	
How is tree repesented in code?
Tree representation
	1)Using Linkedlist
	2)Using Array
	
Tree representation	using Linkedlist:
	Double LinkedList Node
Tree representation	using Array:
	Index 0 may be left conventially due to calculation reasons.
	Root stored at index 1.
	Left Child: At index 2*X
	Right Child:At index 2*X+1
	Where X is index of parent.



Create Blank Binary tree using DLL:

Traverse a Binary tree
Depth First Search
	Pre-order traversal
	In-order traversal
	Post-order traversal
Breadth First search
	Level-order traversal

Pre-order traversal
	Root
	Left subtree
	Right Subtree
	Udemy stack push pop video -107
	
In-order traversal
	Left subtree
	Root
	Right Subtree
	Udemy stack push pop video -107
	
Post-order traversal
	Left subtree
	Right Subtree
	Root
	Udemy stack push pop video -107
	
Level-order traversal
	
Search for value in Binary tree
	We will use Level-order traversal because it uses queue which is faster than System level stack.
	
Insert Value in Binary tree
	Case 1:If root is null.
	Case 2:Put value at first vacant location in level order traversal.
	
Delete Value in Binary tree
	Case 1:When value to be deleted is not exists in binary tree
	Case 2:When value to be deleted exists in binary tree
			a)Find deepest node(Last node in lever order traversal)
			b)Swap deepest node with node to be deleted
	Algo:
		Search node to be deleted
		Find deepest node in the tree
		Copy deepest node's data in current node
		Delete deepest node
		
Find deepest node
	1)Last node in Level order traversal 
	2)find the height of the given tree and then print the node at the bottom-most level.
	3)The idea is to do Inorder traversal of given binary tree. 
		While doing Inorder traversal, we pass level of current node also. 
		We keep track of maximum level seen so far and value of deepest node seen so far.
		
Delete Binary tree
	Just root=null

https://www.baeldung.com/java-binary-tree


Binary tree (Array Implementation)

Create Blank Binary tree using Array
	A blank array of given size
	lastUsedIndex=0;

Insert Value in Binary tree
	Case 1:If array is full
	Case 2:Insert at first vacant cell in array.
			Update lastUsedIndex.
	
	

Time & Space Complexity(LL implementattion)
Particulars 			Time Complexity(LL)	Space Complexity(LL) Time Complexity(Array)	Space Complexity(Array)
Creation of tree		O(1)				O(1)				 O(1)				O(n)	
Insertion of a node		O(n)				O(n)				 O(1)				O(1)
Deletion of a node		O(n)				O(n) 				 O(n)				O(1)
Search for a value		O(n)				O(n)           		 O(n)				O(1)
Traverse of all nodes	O(n)				O(n)				 O(n)				O(1)/O(n)
Deletion of tree		O(1)				O(1)				 O(1)				O(1)
Space efficient					Yes											No

Whenever size we know in advance, we use Array implementation otherewise we use LinkedList implementation.

https://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram
https://www.geeksforgeeks.org/print-binary-tree-2-dimensions/