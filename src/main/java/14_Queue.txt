Queue
What is Queue
	FIFO 
	Add topOfQueue  
	Remove beginningOfQueue, start,front

Why Queue
	When we need FIFO 

Opearations on Queue
	Create()
	enQueue()
	deQueue()
	peekInQueue()
	isEmpty()
	isFull()
	deleteQueue()


Implementation options for Queue
Using Arrays
	Linear Queue
	Circular Queue
Using Linked List
	Linear Queue

Linear Queue using Arrays
Create()
	rear=front=-1 or topOfQueue=beginningOfQueue=-1
	Time Complexity: O(1)
	Space Complexity: O(n)
enQueue()
	Time Complexity: O(1)
	Space Complexity: O(1)
deQueue()
	beginningOfQueue<=topOfQueue
	Time Complexity: O(1)
	Space Complexity: O(1)
peekInQueue()
	Time Complexity: O(1)
	Space Complexity: O(1)
isEmpty()
	beginningOfQueue=-1
	Time Complexity: O(1)
	Space Complexity: O(1)
isFull()
	topOfQueue==arr.length-1
	Time Complexity: O(1)
	Space Complexity: O(1)
deleteQueue()
	Time Complexity: O(1)
	Space Complexity: O(1)


Circular Queue using Arrays
Why Circular Queue?
	If we remove few element, space will be wasted.
	If at time of removal we shift all left element then deQueue() will be of O(n).
	So we need Circular Queue.
Create()
	front=rear=-1 or topOfQueue=beginningOfQueue=-1
	Time Complexity: O(1)
	Space Complexity: O(n)
enQueue()
	Time Complexity: O(1)
	Space Complexity: O(1)
deQueue()
		Time Complexity: O(1)
		Space Complexity: O(1)
peek
	Time Complexity: O(1)
	Space Complexity: O(1)
isEmpty()
	Time Complexity: O(1)
	Space Complexity: O(1)
isFull()
	Time Complexity: O(1)
	Space Complexity: O(1)
deleteQueue()
	Time Complexity: O(1)
	Space Complexity: O(1)




	